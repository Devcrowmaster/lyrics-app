{"version":3,"sources":["components/Form.js","components/Song.js","components/InfoArtist.js","App.js","serviceWorker.js","index.js"],"names":["Form","setSearchSong","useState","artist","song","search","setSearch","error","setError","updateState","e","target","name","value","className","onSubmit","preventDefault","trim","htmlFor","id","type","placeholder","onChange","Song","letter","length","InfoArtist","infoArtist","Object","keys","strArtistThumb","strGenre","strBiographyEN","strFacebook","strTwitter","strLastFMChart","src","alt","href","rel","App","searchSong","setLetter","setInfoArtist","useEffect","a","urlLetter","urlArtist","Promise","all","axios","data","lyrics","artists","consultApiLetra","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.9d715729.chunk.js","sourcesContent":["import React from 'react';\r\nimport { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Form = ({setSearchSong}) => {\r\n\r\n  const [search, setSearch] = useState({\r\n    artist: '',\r\n    song: ''\r\n  });\r\n\r\n  const [error, setError] = useState(false);\r\n  \r\n  const { artist, song} = search;\r\n\r\n\r\n\r\n  //Funcion a cada input para leer su contenido\r\n\r\n  const updateState = e =>{\r\n    setSearch({\r\n      ...search,\r\n      [e.target.name]: e.target.value\r\n    })\r\n  }\r\n\r\n  const handleSubmit = e =>{\r\n    e.preventDefault();\r\n\r\n    if(artist.trim() === '' || song.trim() === ''){\r\n      setError(true);\r\n      return;\r\n    }\r\n    setError(false);\r\n\r\n    //Pasar al componente principal\r\n    setSearchSong(search);\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n  return ( \r\n    <div className=\"bg-info\">\r\n      <div className=\"container\">\r\n        {error ? <p className=\"alert alert-danger text-center p-2\">Todos los campos son obligatorios</p> : null}\r\n        <div className=\"row\">\r\n          <form\r\n            className=\"col card text-white bg-transparent mb-5 pt-5 pb-2\"\r\n            onSubmit={handleSubmit}\r\n          >\r\n            <fieldset>\r\n              <legend className=\"text-center\">Buscador Letras Canciones</legend>\r\n              <div className=\"row\">\r\n                <div className=\"col-md-6\">\r\n                  <div className=\"form-group\">\r\n                    <label htmlFor=\"artist\">Artista</label>\r\n                    <input \r\n                      id=\"artist\"\r\n                      type=\"text\"\r\n                      className=\"form-control\"\r\n                      name=\"artist\"\r\n                      placeholder=\"Nombre Artista\"\r\n                      onChange={updateState}\r\n                      value={artist}\r\n                    />\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"col-md-6\">\r\n                  <div className=\"form-group\">\r\n                    <label htmlFor=\"song\">Cancion</label>\r\n                    <input \r\n                      id=\"song\"\r\n                      type=\"text\"\r\n                      className=\"form-control\"\r\n                      name=\"song\"\r\n                      placeholder=\"Nombre Cancion\"\r\n                      onChange={updateState}\r\n                      value={song}\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <button\r\n                type=\"submit\"\r\n                className=\"btn btn-primary float-right\"\r\n              >Buscar</button>\r\n            </fieldset>\r\n\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>  \r\n  );\r\n}\r\n\r\n\r\nForm.propTypes = {\r\n  setSearchSong: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Form;\r\n","import React, { Fragment } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Song = ({letter}) => {\r\n\r\n  if(letter.length === 0) return null; //Evita que aparezca cuando no hay peticiones\r\n  return(\r\n    <Fragment>\r\n      <h2>Letra Cancion</h2>\r\n      <p className=\"letra\">{letter}</p>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\n\r\nSong.propTypes = {\r\n  letter: PropTypes.string.isRequired\r\n}\r\n\r\nexport default Song;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst InfoArtist = ({infoArtist}) => {\r\n  if(Object.keys(infoArtist).length === 0 ) return null; //Evita mostrar si no hay peticion\r\n\r\n  const { strArtistThumb,strGenre,strBiographyEN, strFacebook,strTwitter,strLastFMChart} = infoArtist;\r\n\r\n  return ( \r\n    <div className=\"card border-light\">\r\n      <div className=\"card-header bg-primary text-light font-weight-bold\">\r\n        Informacion Artista\r\n      </div>\r\n      <div className=\"card-body\">\r\n        <img src={strArtistThumb} alt=\"Logo Artista\"/>\r\n        <p className=\"card-text\">Genero: {strGenre}</p>\r\n        <h2 className=\"card-text\">Biografia: </h2>\r\n        <p className=\"card-text\">{strBiographyEN}</p>\r\n        <p className=\"card-text\">\r\n        <a href={`https://${strFacebook}`} target=\"_blank\" rel=\"noopener noreferrer\">\r\n          <i className=\"fab fa-facebook\"></i>\r\n        </a>\r\n        <a href={`https://${strTwitter}`} target=\"_blank\" rel=\"noopener noreferrer\">\r\n          <i className=\"fab fa-twitter\"></i>\r\n        </a>\r\n        <a href={`${strLastFMChart}`} target=\"_blank\" rel=\"noopener noreferrer\">\r\n          <i className=\"fab fa-lastfm\"></i>\r\n        </a>\r\n        </p>\r\n      </div>\r\n    </div>\r\n\r\n  );\r\n}\r\n\r\nInfoArtist.propTypes = {\r\n  infoArtist: PropTypes.object.isRequired\r\n}\r\n \r\nexport default InfoArtist;","import React, { Fragment, useState, useEffect } from 'react';\nimport Form from './components/Form';\n\nimport axios from 'axios';\nimport Song from './components/Song';\nimport InfoArtist from './components/InfoArtist';\n\nfunction App() {\n\n  const [searchSong, setSearchSong] = useState({});\n\n  const [letter, setLetter] = useState('');\n  const [infoArtist, setInfoArtist] = useState({});\n\n  useEffect(()=>{\n    if(Object.keys(searchSong).length === 0) return; //Verifica que la primera peticion no aga nada\n\n    const consultApiLetra = async()=>{\n\n      const {artist,song} = searchSong;\n      const urlLetter = `https://api.lyrics.ovh/v1/${artist}/${song}`;\n      const urlArtist = `https://www.theaudiodb.com/api/v1/json/1/search.php?s=${artist}`;\n\n      //Esto ejecuta las peticiones en simultaneo\n      const [letter,infoArtist] = await Promise.all([\n        axios(urlLetter),\n        axios(urlArtist)\n      ])\n\n      // console.log(letter)\n      // console.log(infoArtist)\n      // console.log(letter.data.lyrics)\n      // console.log(infoArtist.data.artists[0])\n\n      setLetter(letter.data.lyrics);\n      setInfoArtist(infoArtist.data.artists[0]);\n\n    }\n    consultApiLetra()\n\n  },[searchSong,infoArtist])\n\n  return (\n    <Fragment>\n      <Form\n        setSearchSong={setSearchSong}\n      />\n      <div className=\"container mt-5\">\n        <div className=\"row\">\n          <div className=\"col-md-6\">\n            <InfoArtist\n              infoArtist={infoArtist}\n            />\n          </div>\n          <div className=\"col-md-6\">\n            <Song\n              letter={letter}\n            />\n          </div>\n        </div>\n      </div>\n    </Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}